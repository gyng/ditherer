{"version":3,"file":"771.19fb315.js","mappings":"0JAGA,IAAIA,EAAwB,KAY5B,IAAIC,EAA0B,KAQ1BC,EAAuB,KAiBpB,SAASC,EAAUC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,GAC1D,MAAMC,GAxB0B,OAA5BV,IACAA,EAA0BW,EAAAA,kCAEvBX,GAsBPW,EAAAA,UAAeD,EAAQP,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,GAC3D,MAAMG,GAlBuB,OAAzBX,GAAiCA,EAAqBY,SAAWF,EAAAA,OAAYE,SAC7EZ,EAAuB,IAAIa,YAAYH,EAAAA,OAAYE,SAEhDZ,GAgBDc,EAAUH,EAAIF,EAAS,GACvBM,EAAUJ,EAAIF,EAAS,EAAI,GAE3BO,GApCmBC,EAoCWH,EApCNI,EAoCeH,GA1Cf,OAA1BjB,GAAkCA,EAAsBc,SAAWF,EAAAA,OAAYE,SAC/Ed,EAAwB,IAAIqB,aAAaT,EAAAA,OAAYE,SAElDd,GAImBsB,SAASH,EAAM,EAAGA,EAAM,EAAIC,IAmCAG,QApC1D,IAA6BJ,EAAKC,EAsC9B,OADAR,EAAAA,gBAAqBI,EAAmB,EAAVC,GACvBC,CAEX,CAgBO,SAASM,EAAmBpB,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMe,EAAMC,EAAMC,EAAMC,GAC3F,OAAOhB,EAAAA,mBAAwBR,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMe,EAAMC,EAAMC,EAAMC,EAC/F,C","sources":["webpack:///./wasm/rgba2laba/wasm/rgba2laba.js"],"sourcesContent":["/* tslint:disable */\nimport * as wasm from './rgba2laba_bg';\n\nlet cachegetFloat64Memory = null;\nfunction getFloat64Memory() {\n    if (cachegetFloat64Memory === null || cachegetFloat64Memory.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory;\n}\n\nfunction getArrayF64FromWasm(ptr, len) {\n    return getFloat64Memory().subarray(ptr / 8, ptr / 8 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {number} arg0\n* @param {number} arg1\n* @param {number} arg2\n* @param {number} arg3\n* @param {number} arg4\n* @param {number} arg5\n* @param {number} arg6\n* @returns {Float64Array}\n*/\nexport function rgba2laba(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {\n    const retptr = globalArgumentPtr();\n    wasm.rgba2laba(retptr, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n    wasm.__wbindgen_free(rustptr, rustlen * 8);\n    return realRet;\n\n}\n\n/**\n* @param {number} arg0\n* @param {number} arg1\n* @param {number} arg2\n* @param {number} arg3\n* @param {number} arg4\n* @param {number} arg5\n* @param {number} arg6\n* @param {number} arg7\n* @param {number} arg8\n* @param {number} arg9\n* @param {number} arg10\n* @returns {number}\n*/\nexport function rgba_laba_distance(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) {\n    return wasm.rgba_laba_distance(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);\n}\n\n"],"names":["cachegetFloat64Memory","cachedGlobalArgumentPtr","cachegetUint32Memory","rgba2laba","arg0","arg1","arg2","arg3","arg4","arg5","arg6","retptr","wasm","mem","buffer","Uint32Array","rustptr","rustlen","realRet","ptr","len","Float64Array","subarray","slice","rgba_laba_distance","arg7","arg8","arg9","arg10"],"sourceRoot":""}